<?php
/**
 * 数据库操作类，本类在dr_db类的基础上 封装了 update select
 *
 * User: zahei.com
 * Date: 2017/5/11
 * Time: 0:28
 *
 * <code>
 * #用法1： 获取 table中 id=123 的所有值
 * $cl= new sql( );
 * $cl->select('table',['id'=>'123'])->getALL();
 * </code>
 *
 * <code>
 * #用法2： 获取 table中 id=123 的所有值
 * $cl= new sql( "select * from table where id=:id",[':id'=>123]); #可以解决注入
 * $cl= new sql( "select * from table where id=123"); #未解决注入
 * $cl->getALL();
 * </code>
 *
 */

namespace model;

use DR\DR;

class sql  extends DR {
    private $sql;
    private $keyvar= array();
    private $db;
    private $_start=0;
    private $_every=30;
    private $_startEvery= false;

    public function __construct()
    {
        //$this->drExit('dddddddd4');
        $arr = func_get_args();
        if( isset($arr[0] ) ) $this->sql=$arr[0] ;
        $model = new model();
        $this->db= $model->db();
        if( isset($arr[1] ) ){
            $this->keyvar=$arr[1] ;
            if( !is_array( $this->keyvar )) throw new drException("第二参数必须为数组！",2);
            $var = array();
            foreach( $this->keyvar as $k=>$v ) $var[ $k ] = "'". $this->db->addslashes( $v )."'";
            $this->sql = strtr( $this->sql,$var );
        }
    }


    /**
     * 获取SQL语句
     * @return string
     * @throws drException
     */
    public function getSQL( )
    {
        if( ! $this->sql) throw new drException("SQL NULL",1);
        //if( !$this->keyvar ) return $this->sql;
        return  $this->sql;
    }

    /**
     * 执行
     * @return $this
     * @throws \Exception
     */
    public function query(){
        $r=  $this->db->query( $this->getSQL());
        if( !$r) throw new drException("SQL ERROR",3);
        $this->_startEvery= false ;
        return $this;
    }

    /**
     * 插入后，获取最新的ID
     * @return int
     */
    public function lastID(){
        return $this->db->lastID();
    }

    /**
     * 获取数据库一行的数据
     * @return array
     * @throws drException
     */
    public function getRow( )
    {
        return $this->db->getRow($this->getSQL() );
    }

    /**
     * 获取数据库1列的数据库 并且是 k=>v 第一个字段是key第二个字段为value
     * @return array
     * @throws drException
     */
    public function getCol2( )
    {
        return $this->db->getCol2($this->getSQL() );
    }

    /**
     * 获取数据库一列的数据
     * @return array
     * @throws drException
     */
    public function getCol(){
        return $this->db->getCol($this->getSQL() );
    }

    /**
     * 当getCol2有重复了 需要不覆盖
     * @param $key
     * @param $file
     * @return array
     * @throws drException
     */
    public function getColByKeyFile( $key, $file ){
        $tall = $this->getAllByKeyArr( [$key] );
        $re =[];
        foreach( $tall as $k =>$v  ){
            foreach ( $v as $k2=>$v2){
                $re[$k][]= $v2[ $file ];
            }
        }
        return $re ;
    }

    /**
     * 获取表中符合条件的所有数据
     * @return array
     * @throws drException
     */
    public function getAll(  )
    {
        return $this->db->getAll( $this->getSQL() ); // TODO: Change the autogenerated stub
    }

    /**
     * 获取表中某一特定值数据
     * @return string
     * @throws drException
     */
    public function getOne(){
        return $this->db->getOne( $this->getSQL()  );
    }

    /**
     * 获取表中符合条件的全部数据库 并用 $key当建值，会去重
     *
     * 区别于getAll在于getAll的数组是有序的
     * @param string $key
     * @return array
     * @throws drException
     */
    public function getAllByKey( $key ){
        $tall = $this->getAll();
        $re = array();
        foreach( $tall as $v ){
            if(!isset( $v[$key]) ) $this->throw_exception( "key 不在数组中",9);
            $re[ $v[$key] ] = $v ;
        }
        return $re ;
    }

    /**
     * 按数组组合 最多支持3层数组，也就是key_arr 最多3个值，不去重
     *
     * getAllByKeyArr(['user_id','id']);
     * @param array $key_arr
     * @return array
     * @throws drException
     */
    public function getAllByKeyArr( $key_arr){
        if( !isset( $key_arr) )  $this->throw_exception( "key_arr必须是数组",19);
        $tall = $this->getAll();
        $re = array();
        $key_cnt = count( $key_arr );
        foreach( $tall as $v ){
            if( $key_cnt==1 ){
                $re[  $v[ $key_arr[0]] ][]= $v;
            } elseif( $key_cnt==2 ) {
                $re[ $v[ $key_arr[0]] ][ $v[ $key_arr[1]]  ][] = $v;
            }
            elseif( $key_cnt==3 )    $re[ $v[ $key_arr[0]] ][ $v[ $key_arr[1]]  ][ $v[ $key_arr[2]]  ][]= $v;
            else  $re[ $v[ $key_arr[0]] ][ $v[ $key_arr[1]]  ][ $v[ $key_arr[2]]  ][ $v[ $key_arr[3]]  ][]= $v;
        }
        return $re ;
    }

    /**
     * 入表新增数据
     * @param string $table
     * @param array $column
     * @return $this
     * @throws drException
     */
    public function insert(  $table, $column ){

        if( ! is_array($column) || !$column )  throw new drException("column is not array",2);
        $sql = "insert into `".$table."` set  ";
        foreach ( $column as $k=>$v ) $sql.=" `".$k."`='".$this->db->addslashes( $v )."',";
        $this->sql= trim( $sql,',');
        //self::query();
        //return $this->lastID();
        return $this;
    }

    /**
     * 批量入表
     * @param string $table
     * @param array $column_arr
     * @return $this
     * @throws drException
     */
    public function insertPL( $table, $column_arr ){
        if( ! is_array($column_arr) || !$column_arr )  throw new drException("column_arr is not array",2);
        $arr_key = array_keys( $column_arr[0] );
        $sql =  "insert into `".$table."`  (";
        foreach ( $arr_key as $v )  $sql .= "`".$this->addslashes($v)."`,";
        $sql = trim( $sql,',')." )values";
        foreach( $column_arr as $column){
            $sl='';
            foreach( $arr_key as $k){
                $sl.= "'".$this->addslashes( $column[$k])."',";
            }
            $sql.= "(".trim($sl,',').'),';
        }
        $this->sql= trim( $sql,',');
        return $this;
    }

    /**
     * 查询数据
     * @param string $table
     * @param array|string $where
     * @param array $limit
     * @param array $file
     * @param array $order
     * @return $this
     * @throws drException
     */
    public function select( $table, $where, $limit=[], $file=[],$order=[] ,$opt=[]){
        $this->sql = "select ". $this->arr2Files($file)." from ". $table." where ". $this->arr2where( $where). $this->arr2Group($opt['group'] ). $this->arr2Order( $order ). $this->arr2Limit( $limit );
        return $this;
    }

    public function arr2Group( $group ){
        if( !$group ) return '';
        $key = '';
        if( is_array($group  )){
            foreach ($group as $v ) $key .="`".$this->addslashes($v)."`,";
        }else
            $key="`".$this->addslashes($group )."`";
        return ' group by  '. trim($key,',')." ";

    }

    public function rank( $table , $where,$group , $key, $limit=[], $order=[] ){
        if(! $order ) $order=['total'=>'desc'];
        $this->sql ="SELECT `".$group."`, count(".$key.") as cnt, sum(".$key.") as total FROM ".$table." WHERE ".$this->arr2where( $where)." group by  `".$group."`  ".  $this->arr2Order( $order ). $this->arr2Limit( $limit );
        return $this;
    }

    /**
     * group by
     * @param string $table
     * @param array $group_file
     * @param array $where
     * @param array $file
     * @param array $order
     * @param array $limit
     * @return $this
     * @throws drException
     */
    public function group( $table,$group_file,$where, $file,$order=[],$limit=[]){
        $this->sql = "select ". $this->arr2Files($file)." from ". $table." where ". $this->arr2where( $where). " group by ".$this->arr2Files($group_file)  . $this->arr2Order( $order ). $this->arr2Limit( $limit );
        return $this;
    }

    /**
     * 获取符合条件的行数
     * @param string $table
     * @param where $where
     * @return $this
     * @throws drException
     */
    public function getCount( $table, $where ){
        $this->sql = "select count(*) as cnt from ". $table." where ".$this->arr2where( $where) ;
        return $this;
    }

    /**
     * 从表中取数据最后按data中key
     *
     * 处理复杂情况
     * - data为一重数组 并且data与新表都存在key table[key]与data[key] merge
     * - data为一重数组 新表中的key table[key]与 data[ opt[key][0] ] merge
     * - data为二重数组 新表中的key table[key]与 data[][ opt[key][0] ] merge
     * @param string $table
     * @param string $key 新表中的key
     * @param array $data 有可能1重数据，2重数据
     * @param array $file 表中file值
     * @param array $opt [key=[uid,user_id]]  data中的key
     * @return $this
     * @throws drException
     */
    public function merge( $table,$key, &$data,$file=[], $opt=[] ){
        if( !$data) return $this;
        if(isset($opt['key']) && !is_array( $opt['key'] ) ) $this->throw_exception( "opt key 必须为数组！",7018);

        $where=[]; if ( isset($opt['where'] ))  $where=$opt['where'];
        if(! isset($opt['key']) && isset( $data[$key] ) ){ #data 一重数组 并且data与新表都存在key table[key]与data[key] merge
            //$where=[$key=>$data[$key] ];
            $where[ $key] =  $data[$key] ;
            $m_name= $opt['m_name']? $opt['m_name']:  $key.'_merge' ;
            $data[ $m_name ] = $this->select( $table, $where,[], $file)->getRow();
        }elseif( isset($opt['key']) && isset( $data[$opt['key'][0]] )  ) {  #data 一重数组 新表中的key table[key]与 data[ opt[key][0] ] merge
            $arr = [];
            foreach( $opt['key'] as $k){  if( isset($data[$k] ) ) $arr[ $data[$k] ]=1;  }
            //$where=[$key=> array_keys( $arr) ];
            $where[ $key] = array_keys( $arr)  ;
            $tarr = $this->select( $table,$where,[], $file)->getAllByKey( $key );
            foreach( $opt['key'] as $k){
                if( isset($data[$k] ) ) {
                    $kv = $data[$k];
                    $m_name= $opt['m_name']? $opt['m_name']:  $k.'_merge' ;
                    if( $tarr[$kv] )    $data[ $m_name ] = $tarr[$kv];
                }
            }

        }else{  #data 二重数组 新表中的key table[key]与 data[][ opt[key][0] ] merge
            $var=[];
            if(! isset($opt['key']) ) $opt['key']= [ $key ];
            foreach($data as $v  ){
                foreach (  $opt['key'] as $k2 ) {
                    if( isset( $v[$k2]) )$var[ $v[$k2] ]= $v[$k2];
                }
            }
            if( $var ){
                $where[$key ] = $var;
                $tarr = $this->select( $table, $where ,[], $file)->getAllByKey( $key );
                foreach($data as $k => $v  ){
                    foreach (  $opt['key'] as $k2 ) {
                        if (isset($v[$k2])) {
                            $kv = $v[$k2];
                            $m_name= $opt['m_name']? $opt['m_name']:  $k2 . '_merge'  ;
                            if (isset($tarr[$kv])) $data[$k][ $m_name ] = $tarr[$kv];
                        }
                    }
                }
            }
        }
        return  $this;
    }

    /**
     * 将数组转换为mysql排序order [file1=>desc,file2=>asc ]
     * @param array $order  [file1=>desc,file2=>asc ]
     * @return string
     * @throws drException
     */
    private function arr2Order( $order=[] ){
        if(  !$order ) return '';
        if(! is_array($order))  $this->throw_exception( "order name must be array ['file_key'=>'desc']",8 );
        //desc   ASC
        $re = '';
        $selp =',';
        foreach($order as  $k=>$v ){
            if( is_array( $v)){
                $str='';
                foreach ($v as $v2 ) $str.=",'".$this->addslashes($v2 )."'";
                $re.= "FIELD(`".$k."`".$str .")" .$selp ;
                continue;
            }
            $v = strtolower( $v );
            if(  !($v =='desc' || $v =='asc')){
                $this->throw_exception( "order value must 'desc' or 'asc' !");
            }
            $re.= '`'.$this->addslashes($k).'` '.$v.$selp ;
        }
        return trim( " ORDER BY ". $re, $selp );
    }

    /**
     * 将数组转化为sql中的file语句
     * @param array $file
     * @return string
     * @throws drException
     */
    private function arr2Files( $file ){
        if( !$file ) return  '*';
        if( is_array($file)){
            $re ='';
            foreach( $file as $v ){
                $v2= strtolower( $v);
                if( strpos($v2,'(') && (  strpos($v2,'count')!==false  ||  strpos($v2,'sum')!==false  ||  strpos($v2,'avg')!==false) )
                    $re.=  $v .",";
                else  $re.="`".$this->addslashes($v)."`,";
            }
            return trim( $re,',');
        }else{
            $this->throw_exception( "file name must be array",7);
        }
    }

    /**
     * 将数组转化为sql中的 limit 语句
     * @param array $limit
     * @return string
     * @throws drException
     */
    private function  arr2Limit( $limit ){
        if( $this->_startEvery ){
            return ' limit '. $this->_start.' ,'. $this->_every ;
        }
        if( ! $limit) return '';
        $start=0; $l= 0;
        if( count($limit)==1 ) $l= intval($limit[0]);
        if(  count($limit)>1  ){
            $l= intval($limit[1]);
            $start = intval($limit[0]);
        }
        if( $start<0  ) $this->throw_exception('limit start must over 0 ',8 );
        if( $l<=0  ) $this->throw_exception('limit page must over 0 ',9 );
        return ' limit '.$start.' ,'.$l ;
    }

    /**
     * 处理注入函数
     * @param string $v
     * @return string
     */
    private function addslashes( $v){
        return $this->db->addslashes( $v );
    }

    /**
     * 入表更改数据
     * - 自增加自减去使用  ['+'=>[f2=>1,f3=>1],'-'=>[f3=>1,f5=>1] ]
     * @param string $table
     * @param array $column 要更改的[file=>valu,'+'=>[file2=>1] ] 自增加自减去使用  ['+'=>[f2=>1,f3=>1],'-'=>[f3=>1,f5=>1] ]
     * @param array $where
     * @return $this
     * @throws drException
     */
    public function update($table,$column, $where ){
        if( ! is_array($column) || !$column )  throw new drException("column is not array",2);
        //if( ! is_array($where) || !$where )  throw new drException("where is not array",3);

        $sql ="update `".$table."`  set  ";

        foreach ( $column as $k=>$v  ){
            if($k=='+' || $k=='-' ){
                foreach( $v as $k2=>$v2 ){
                    $sql .= "`".$k2."`=`".$k2."` ".$k." ". abs(intval( $v2)).',';
                    //$sql .= "`".$k2."`=`".$k2."` ". intval( $v2).',';
                }
            }else{
                $sql .="`".$k."`='".$this->addslashes($v)."',";
            }
        }
        $this->sql = trim( $sql,',') . " where ". $this->arr2where( $where );
        return $this;
    }

    /**
     * [详]将数组转为sql中的where语句
     *
     * - 语法1：[file=>v,file2=>v2] 转换为 file=v and file2=v2
     * - 语法2：[file=>[a,b,c],file2=>v2] 转换为 file in(a,b,c) and file2=v2
     * - 语法3：[or=>[file=>[a,b,c],file2=>v2] ,f3=>v3] 转化为 ( (file in(a,b,c)) or (file2=v2) ) and f3=v3
     * - 语法like：[like=>[file1=>v1,file2=>v2]] 转为为 (`file1` like 'v1' or  `file2` like 'v2') 另 like的v1、v2 除去%后必须大于等于3个字符
     * - 语法操作符号：['>'=>[file1=>v1,file2=>v2]] 转为为 (`file1` > 'v1' and  `file2` > 'v2') 操作符号包括 >、<、<=、>=
     * @param array $arr
     * @return string
     * @throws drException
     */
    function arr2where( $arr ){
        if( $arr==='1' ) return ' 1 ';
        if( ! is_array($arr) || !$arr ) {
            //$this->drExit( $arr );
            $this->throw_exception("where is not array",3);
        }


        $re= array();
        $fuHao=['>'=>1,'<'=>1,'>='=>1,'<='=>1 ,'!='=>1 ];
        foreach( $arr as $k=>$v  ){
            $k= trim( $k );
            if($k=='between' and  is_array( $v ) ) {
                $re3= [];
                foreach( $v as $k2=>$v2 ){
                    $re3[]= " `".$k2."` BETWEEN  '".$this->addslashes($v2[0])."' AND  '".$this->addslashes($v2[1])."' ";
                }
                $re[]= join("and", $re3 );

            }elseif( isset( $fuHao[ $k])  and  is_array( $v ) ){
                foreach( $v as $k2=> $v2 ){
                    $re[]= "`".$k2."`".$k."'".$this->addslashes($v2 )."'";
                }
            }elseif($k=='or' and  is_array( $v ) ){
                $re2=[];
                foreach($v as $v2 ){
                    $re2[]="(".  $this->arr2where( $v2).")";
                }
                $re[]="(". join(' '.$k.' ', $re2 ).")";
            }elseif( ($k=='not'|| $k=='not in' ) and  is_array( $v ) ){
                $re2=[];
                foreach ( $v as $k2=>$v2 ){
                    $v3='';
                    if(is_array($v2)){
                        foreach ($v2 as $v4)  $v3.="'".$this->addslashes($v4)."',";
                    }else{
                        $v3= "'".$this->addslashes($v2)."'";
                    }
                    $re2[]= " `".$k2."` not in(  ".trim($v3,',').") ";
                }
                $re[]="(". join(' and ', $re2 ).")";

            }elseif( $k=='nolike' and  is_array( $v ) ){

                $re2=[];
                foreach ( $v as $k2=>$v2 ){
                    $re2[]= " `".$k2."` not like '".$this->addslashes($v2)."' ";
                }
                $re[]="(". join(' and ', $re2 ).")";

            }elseif( $k=='like' and  is_array( $v ) ){
                $re2=[];
                foreach ( $v as $k2=>$v2 ){
                    if( strlen( trim($v2,'%'))<3 ) $this->throw_exception("搜索字符必须大于3个字符",4 );
                    $re2[]= " `".$k2."` like '".$this->addslashes($v2)."' ";
                }
                $re[]="(". join(' or ', $re2 ).")";

            }elseif( is_array( $v ) ){
                $str ='';
                foreach ( $v as $v2 ) $str.="'".$this->addslashes($v2)."',";
                $re[]=" `".$k."` in(".trim( $str,',').") ";
            }else   $re[]= "`".$k."`='".$this->addslashes($v )."'";
        }
        return join(' and ', $re );
    }

    /**
     * 删除一个表符合条件的数据
     * @param string $table
     * @param array $where
     * @param int $limit
     * @return $this
     * @throws drException
     */
    public function delete( $table, $where, $limit = 1 ){
        $this->sql = "delete from `".$table."` where  ". $this->arr2where( $where). " limit ". $limit;
        return $this;
    }

    /**
     * 返回 数组 [list=>[] ,page=>string]  如果 $_GET['export']=='excel' 忽略limit 全部(至多导出2000条)得出
     * @param string $table
     * @param array $where
     * @param array $file
     * @param int $every
     * @return array
     * @throws drException
     */
    public function selectWithPage( $table, $where, $every=30, $file=[] ,$order =[] ){
        $re=[ 'list'=>[] ,'page'=>'','page_total'=>0,'total_cnt'=>0 ];
        $re['total_cnt']=  $total =$this->getCount($table,$where)->getOne();
        if( isset($_GET['sql']) )   $re['sql'][]= $this->getCount($table,$where)->getSQL();
        if( $total<=0 ) return $re ;
        if( isset( $_GET['export']) ||  isset( $_GET['ex']) ){ #碰到导出的时候 全部 //=='excel'
            $max= intval($_GET['max'])>0?  intval($_GET['max'])  :2000;
            $start =  intval($_GET['start'])>0 ?  intval($_GET['start']):0   ;
            $sql =  $this->select( $table,$where,[ $start ,$max ],$file,$order  );
            $re['list']= $sql->getAll();
            return $re;
        }
        
        $page = new page( $total, $every);
        $pg_re=  $page->pageLinks( );
        $re['page']=$pg_re['html'];
        $re['page_total']=  $pg_re['page_total'];




        $pageno = $page->getCurrent();
        $sql =  $this->select( $table,$where,[$every*($pageno-1),$every ],$file,$order  );
        $re['list']= $sql->getAll();
        if( isset($_GET['sql']) ) $re['sql'][]= $sql->getSQL();
        return $re ;
    }



    /**
     * 无返回 输入必须为 函数
     * @param string $function
     * @return $this
     * @throws drException
     */
    function getWithFun( $function){
        $this->db->getWithFun( $this->getSQL(),$function );
        return $this;
    }

    /**
     * 使用 start every 来分页不去取总共页数
     * @param int $start
     * @param int $every
     * @return $this
     * @throws drException
     */
    function setStartEvery($start=0, $every=0){
        $start= $start>0? $start:intval($_GET['start']);
        $every= $every>0?$every: intval( $_GET['every']);
        if( $start<0  ) $start=0;
        if( $every<=0 ) $every=30;
        $this->_startEvery= true;
        $this->_start= $start;
        $this->_every = $every;
        if(  $this->_every>10000 ) $this->throw_exception("每页不超过10000",66);
        if( $start>1000000 ) $this->throw_exception("超过百万请联系技术人员",67);
        return $this;
    }

}
